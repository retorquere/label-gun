#!/usr/bin/env python

import subprocess
import json
import yaml
import re
import pickledb
from types import SimpleNamespace
import shlex
from datetime import datetime
import sys

def run(cmd):
  print(' '.join([shlex.quote(c) for c in cmd]))
  result = subprocess.run(cmd, capture_output=True, text=True)
  if result.returncode != 0:
    print(f"Command failed with exit code {result.returncode}")
    print(f"Error message: {result.stderr}")
    sys.exit(1)
  return result.stdout

def sanitize_key(key):
  key = re.sub(r'\W|^(?=\d)', '_', key)
  key = re.sub(r'_+', '_', key)
  return key

def object_hook(d):
  return SimpleNamespace(**{sanitize_key(k): v for k, v in d.items()})

def str_presenter(dumper, data):
  if len(data.splitlines()) > 1 or '\n' in data:
    text_list = [line.rstrip() for line in data.splitlines()]
    fixed_data = "\n".join(text_list)
    return dumper.represent_scalar('tag:yaml.org,2002:str', fixed_data, style='|')
  return dumper.represent_scalar('tag:yaml.org,2002:str', data)
yaml.add_representer(str, str_presenter)
yaml.add_representer(SimpleNamespace, lambda dumper, data: dumper.represent_dict(vars(data)))

###################################################
limit = '1000'
class Project:
  def __init__(self, number):
    project = json.loads(run(['gh', 'project', 'view', str(number), '--owner', '@me', '--format', 'json']), object_hook=object_hook)
    for key, value in vars(project).items():
      setattr(self, key, value)

    self.fields = json.loads(run(['gh', 'project', 'field-list', str(number), '--owner', '@me', '--format', 'json']), object_hook=object_hook).fields
    self.field = SimpleNamespace(
      end_date = next((f.id for f in self.fields if f.name == 'End date')),
      start_date = next((f.id for f in self.fields if f.name == 'Start date')),
      status = next((f.id for f in self.fields if f.name == 'Status')),
      waiting = next((f.id for f in self.fields if f.name == 'Waiting'))
    )

    result = run(['gh', 'project', 'item-list', str(number), '--format', 'json', '--owner', '@me', '--limit', limit])
    self.cards = json.loads(result, object_hook=object_hook).items
    for card in self.cards:
      card.repository = card.repository.replace('https://github.com/', '').lower()

  def status(self, label):
    for f in self.fields:
      if f.name.lower() == 'status':
        return next((option.id for option in f.options if option.name.lower() == label.lower()), None)
    return None
Project = Project(5)
###################################################

class UserTracker:
  def __init__(self):
    self.cache = pickledb.PickleDB('users.json')
    self.user = False
    self.owner = False
    self.last = None

  def ping(self, kind):
    setattr(self, kind, True)
    self.last = kind

  def issue(self, issue):
    if not self.cache.get(issue.author.login):
      if issue.author.is_bot:
        self.cache.set(issue.author.login, 'owner')
      else:
        result = run(['gh', 'api', f'repos/{repo}/issues/{issue.number}', '--jq', '.author_association'])
        status = result.strip()
        self.cache.set(issue.author.login, 'owner' if status == 'OWNER' else 'user')
      self.cache.save()
    self.ping(self.cache.get(issue.author.login))

  def comment(self, comment):
    if not self.cache.get(comment.author.login):
      if comment.author.login == 'github-actions':
        self.cache.set(comment.author.login, 'owner')
      else:
        self.cache.set(comment.author.login, 'owner' if comment.authorAssociation == 'OWNER' else 'user')
      self.cache.save()
    self.ping(self.cache.get(comment.author.login))

def seed(repo):
  repo = repo.lower()
  result = run(['gh', 'issue', 'list', '--state', 'open', '--repo', repo, '--json', 'assignees,author,createdAt,id,number,labels,projectItems,state,comments', '--limit', limit])
  issues = json.loads(result, object_hook=object_hook)
  print(len(issues), 'issues')
  for issue in issues:
    labels = [label.name for label in issue.labels]

    start_date = issue.createdAt.split('T')[0]
    end_date = issue.createdAt.split('T')[0]
    user = UserTracker()
    user.issue(issue)
    for comment in issue.comments:
      end_date = comment.createdAt.split('T')[0]
      user.comment(comment)

    card = next((c for c in Project.cards if c.repository == repo and c.content.number == issue.number), None)

    edits = []

    if user.last == 'user' and 'awaiting-user-feedback' in labels:
      edits += ['--remove-label', 'awaiting-user-feedback']
    # only do this manually
    #elif user.last == 'owner' and user.user and 'awaiting-user-feedback' not in labels:
    #  edits == ['--add-label', 'awaiting-user-feedback']

    if user.owner and len(issue.assignees) == 0:
      edits += ['--add-assignee', 'retorquere']

    if len(edits) > 0:
      run(['gh', 'issue', 'edit', f'{issue.number}', '--repo', repo] + edits)

    if not card:
      result = run(['gh', 'project', 'item-add', str(Project.number), '--owner', '@me', '--url', f'https://github.com/{repo}/issues/{issue.number}', '--format', 'json'])
      item_id = json.loads(result, object_hook=object_hook).id
      card = SimpleNamespace(id=item_id, content=SimpleNamespace(repository=repo, number=issue.number), end_date=None, start_date=None, status=None)

    if start_date != getattr(card, 'start_date', None):
      run(['gh', 'project', 'item-edit', '--id', card.id, '--project-id', Project.id, '--field-id', Project.field.start_date, '--date', start_date])
    if end_date != getattr(card, 'end_date', None):
      run(['gh', 'project', 'item-edit', '--id', card.id, '--project-id', Project.id, '--field-id', Project.field.end_date, '--date', end_date])

    if user.user and 'awaiting-user-feedback' in labels:
      status = 'Awaiting user input'
    elif not user.user or len(issue.assignees) > 0:
      status = 'In progress'
    elif not user.owner:
      status = 'To triage'
    else:
      status = 'Backlog'

    if card.status != status:
      run(['gh', 'project', 'item-edit', '--id', card.id, '--project-id', Project.id, '--field-id', Project.field.status, '--single-select-option-id', Project.status(status)])

    waiting = (datetime.today().date() - datetime.strptime(end_date, "%Y-%m-%d").date()).days + 1
    if getattr(card, 'waiting', None) != waiting:
      run(['gh', 'project', 'item-edit', '--id', card.id, '--project-id', Project.id, '--field-id', Project.field.waiting, '--number', str(waiting)])

repos = [
  'bibtex-parser',
  'generator-zotero-plugin',
  'label-gun',
  'zotero-better-bibtex',
  'zotero-cite-columns',
  'zotero-clear-journal-abbrev',
  'zotero-date-from-last-modified',
  'zotero-open-pdf',
  'zotero-report-customizer',
  'zotero-uid-column',
  'unicode2latex',
  'zotero-better-bibtex',
  'zotero-cite-columns',
  'zotero-clear-journal-abbrev',
  'zotero-date-from-last-modified',
  'zotero-deb',
  'zotero-debug-log',
  'zotero-file-hierarchy',
  'zotero-folder-import',
  'zotero-link-local-files',
  'zotero-opds',
  'zotero-opds-ts',
  'zotero-open-pdf',
  'zotero-plugin',
  'zotero-pmcid-fetcher',
  'zotero-report-customizer',
  'zotero-sync',
  'zotero-uid-column',
]
for repo in repos:
  if '/' not in repo:
    repo = '/'.join(['retorquere', repo])
  seed(repo)

