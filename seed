#!/usr/bin/env python

import subprocess
import json
import yaml
from easydict import EasyDict
import re
import pickledb
from types import SimpleNamespace
import shlex

def run(cmd):
  print(' '.join([shlex.quote(c) for c in cmd]))
  result = subprocess.run(cmd, check=True, capture_output=True, text=True)
  return result.stdout

def sanitize_key(key):
  key = re.sub(r'\W|^(?=\d)', '_', key)
  key = re.sub(r'_+', '_', key)
  return key

def easydict_hook(d):
  #return EasyDict({sanitize_key(k): v for k, v in d.items()})
  return EasyDict(d)

def todict(d):
  if isinstance(d, EasyDict):
    d = {k: todict(v) for k, v in d.items()}
  elif isinstance(d, list):
    d = [todict(i) for i in d]
  return d
def str_presenter(dumper, data):
  if len(data.splitlines()) > 1 or '\n' in data:  
    text_list = [line.rstrip() for line in data.splitlines()]
    fixed_data = "\n".join(text_list)
    return dumper.represent_scalar('tag:yaml.org,2002:str', fixed_data, style='|')
  return dumper.represent_scalar('tag:yaml.org,2002:str', data)
yaml.add_representer(str, str_presenter)
yaml.add_representer(EasyDict, lambda dumper, data: dumper.represent_dict(todict(data)))

###################################################
limit = '1000'
Repo = 'retorquere/zotero-better-bibtex'.lower()
class Project:
  def __init__(self, number)
    project = json.loads(run(['gh', 'project', 'view', str(Project.number), '--owner', Repo.split('/')[0], '--format', 'json']), object_hook=easydict_hook)
    for key, value in project.items():
      setattr(self, key, value)
    self.fields = json.loads(run(['gh', 'project', 'field-list', str(Project.number), '--owner', Repo.split('/')[0], '--format', 'json']), object_hook=easydict_hook).fields
    self.endDate = next((f.id for f in Project.fields if f.name == 'End date'))
    self.startDate = next((f.id for f in Project.fields if f.name == 'Start date'))

  def status(self, label):
    for f in self.fields:
      if f.name.lower() == 'status':
        return next((option.id for option in f.options if f.option.name.lower() == label.lower()), None)
    return None
Project = Project(5)
###################################################

result = run(['gh', 'project', 'item-list', str(Project.number), '--format', 'json', '--owner', '@me', '--limit', limit])
cards = json.loads(result, object_hook=easydict_hook).items
for card in cards:
  card.repository = card.repository.replace('https://github.com/', '').lower()

class UserTracker:
  def __init__(self):
    self.cache = pickledb.PickleDB('users.json')
    self.user = False
    self.owner = False
    self.last = None

  def ping(self, kind):
    setattr(self, kind, True)
    self.last = kind

  def issue(self, issue):
    if not self.cache.get(issue.author.login):
      if issue.author.is_bot:
        self.cache.set(issue.author.login, 'owner')
      else:
        result = run(['gh', 'api', f'repos/{Repo}/issues/{issue.number}', '--jq', '.author_association'])
        status = result.strip()
        self.cache.set(issue.author.login, 'owner' if status == 'OWNER' else 'user')
      self.cache.save()
    self.ping(self.cache.get(issue.author.login))

  def comment(self, comment):
    if not self.cache.get(comment.author.login):
      if comment.author.login == 'github-actions':
        self.cache.set(comment.author.login, 'owner')
      else:
        self.cache.set(comment.author.login, 'owner' if comment.authorAssociation == 'OWNER' else 'user')
      self.cache.save()
    self.ping(self.cache.get(comment.author.login))

result = run(['gh', 'issue', 'list', '--state', 'open', '--repo', Repo, '--json', 'assignees,author,createdAt,id,number,labels,projectItems,state,comments', '--limit', limit])
issues = json.loads(result, object_hook=easydict_hook)
print(len(issues), 'issues')
for issue in issues:
  entry = EasyDict({
    'number': issue.number,
    'repo': Repo,
    'start': issue.createdAt,
    'end': issue.createdAt,
    'status': None,
  })

  labels = [label.name for label in issue.labels]

  start_date = issue.createdAt.split('T')[0]
  end_date = issue.createdAt.split('T')[0]
  user = UserTracker()
  user.issue(issue)
  for comment in issue.comments:
    end_date = comment.createdAt.split('T')[0]
    user.comment(comment)

  card = next((c for c in cards if c.repository == Repo and c.content.number == issue.number), None)

  edits = []

  if user.last == 'user' and 'awaiting-user-feedback' in labels:
    edits += ['--remove-label', 'awaiting-user-feedback']
  elif user.last == 'owner' and user.user and 'awaiting-user-feedback' not in labels:
    edits == ['--add-label', 'awaiting-user-feedback']

  if user.owner and len(issue.assignees) == 0:
    edits += ['--add-assignee', 'retorquere']

  if len(edits) > 0:
    run(['gh', 'issue', 'edit', f'{issue.number}', '--repo', Repo] + edits)

  if not card:
    result = run(['gh', 'project', 'item-add', str(Project.number), '--owner', Repo.split('/')[0], '--url', f'https://github.com/{Repo}/issues/{issue.number}', '--format', 'json'])
    item_id = json.loads(result, object_hook=easydict_hook).id
    card = EasyDict({ 'id': item_id, 'content': EasyDict({ 'repository': Repo, 'number': issue.number }), 'end_date': None, 'start_date': None, 'status': None })
    cards.append(card)

  print(yaml.dump(card))
  if start_date != card.get(Project.startDate):
    run(['gh', 'project', 'item-edit', '--id', card.id, '--project-id', Project.id, '--field-id', Project.startDate, '--date', start_date])
    break
  if start_date != card.get(Project.endDate):
    run(['gh', 'project', 'item-edit', '--id', card.id, '--project-id', Project.id, '--field-id', Project.endDate, '--date', end_date])
    break
  #if user.last == 'owner' and len([pi for pi in issue.projectItems if pi.title == Project.title and pi.status.name == 'In progress']) == 0::
  #  edits += ['--field', 'Status', '--value', 'In progress']

